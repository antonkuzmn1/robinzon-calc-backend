openapi: "3.0.3"
info:
  title: "Calc backend API"
  description: "robinzon-calc-backend"
  version: "2024.04.05-ALPHA"
servers:
  - url: "http://localhost:8080/api/"
paths:
  /api/security/auth:
    post:
      summary: "POST api/security/auth"
      operationId: "auth"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/security/check:
    post:
      summary: "POST api/security/check"
      operationId: "check"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/security/logout:
    post:
      summary: "POST api/security/logout"
      operationId: "logout"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/fm/insert:
    post:
      summary: "POST api/data/fm/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FmInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/fm/update:
    post:
      summary: "POST api/data/fm/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FmUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/fm/delete:
    post:
      summary: "POST api/data/fm/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/fm/rent:
    post:
      summary: "POST api/data/fm/rent"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RentForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/fm:
    get:
      summary: "GET api/data/fm"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FmEntity"
  /api/data/fm/vm:
    get:
      summary: "GET api/data/fm/vm"
      operationId: "getByVm"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FmEntity"
  /api/data/client/insert:
    post:
      summary: "POST api/data/client/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/client/update:
    post:
      summary: "POST api/data/client/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/client/delete:
    post:
      summary: "POST api/data/client/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/client/balance:
    post:
      summary: "POST api/data/client/balance"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientBalanceForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/client/pay:
    post:
      summary: "POST api/data/client/pay"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientPayForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/client:
    get:
      summary: "GET api/data/client"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ClientEntity"
  /api/data/net/insert:
    post:
      summary: "POST api/data/net/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/net/update:
    post:
      summary: "POST api/data/net/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/net/delete:
    post:
      summary: "POST api/data/net/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/net/rent:
    post:
      summary: "POST api/data/net/rent"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RentForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/net:
    get:
      summary: "GET api/data/net"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/NetEntity"
  /api/data/reg/insert:
    post:
      summary: "POST api/data/reg/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/reg/update:
    post:
      summary: "POST api/data/reg/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/reg/delete:
    post:
      summary: "POST api/data/reg/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/reg:
    get:
      summary: "GET api/data/reg"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RegEntity"
  /api/data/vm/insert:
    post:
      summary: "POST api/data/vm/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmInsertUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vm/update:
    post:
      summary: "POST api/data/vm/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmInsertUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vm/delete:
    post:
      summary: "POST api/data/vm/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmDeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vm/rent:
    post:
      summary: "POST api/data/vm/rent"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmRentForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vm/history:
    post:
      summary: "POST api/data/vm/history"
      operationId: "historyAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VmHistory"
  /api/data/vm/ssh/update:
    post:
      summary: "POST api/data/vm/ssh/update"
      operationId: "updateBySsh"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ResponseEntity"
  /api/data/vm:
    get:
      summary: "GET api/data/vm"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VmEntity"
  /api/data/vpn/type/insert:
    post:
      summary: "POST api/data/vpn/type/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpnTypeInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/type/update:
    post:
      summary: "POST api/data/vpn/type/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpnTypeUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/type/delete:
    post:
      summary: "POST api/data/vpn/type/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/type:
    get:
      summary: "GET api/data/vpn/type"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VpnTypeEntity"
  /api/data/vpn/server/insert:
    post:
      summary: "POST api/data/vpn/server/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpnServerInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/server/update:
    post:
      summary: "POST api/data/vpn/server/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpnServerUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/server/delete:
    post:
      summary: "POST api/data/vpn/server/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/server:
    get:
      summary: "GET api/data/vpn/server"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VpnServerEntity"
  /api/data/vpn/user/insert:
    post:
      summary: "POST api/data/vpn/user/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpnUserInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/user/update:
    post:
      summary: "POST api/data/vpn/user/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpnUserUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/user/delete:
    post:
      summary: "POST api/data/vpn/user/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/data/vpn/user:
    get:
      summary: "GET api/data/vpn/user"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VpnUserEntity"
  /api/security/user/insert:
    post:
      summary: "POST api/security/user/insert"
      operationId: "insert"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInsertForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/security/user/update:
    post:
      summary: "POST api/security/user/update"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/security/user/delete:
    post:
      summary: "POST api/security/user/delete"
      operationId: "update"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/security/user:
    get:
      summary: "GET api/security/user"
      operationId: "getAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserEntity"
components:
  schemas:
    AuthRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    FmInsertForm:
      type: "object"
      properties:
        name:
          type: "string"
        ip:
          type: "string"
        title:
          type: "string"
        specifications:
          type: "string"
        description:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        vm:
          type: "boolean"
        token:
          type: "string"
      required:
        - "name"
        - "ip"
        - "title"
        - "specifications"
        - "description"
        - "token"
    FmUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        ip:
          type: "string"
        title:
          type: "string"
        specifications:
          type: "string"
        description:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        vm:
          type: "boolean"
        token:
          type: "string"
      required:
        - "name"
        - "ip"
        - "title"
        - "specifications"
        - "description"
        - "token"
    DeleteForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        token:
          type: "string"
      required:
        - "token"
    RentForm:
      type: "object"
      properties:
        entityId:
          type: "integer"
          format: "int64"
        clientId:
          type: "integer"
          format: "int64"
        token:
          type: "string"
      required:
        - "token"
    Timestamp:
      type: "object"
      properties:
        nanos:
          type: "integer"
          format: "int32"
    UserEntity:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        admin:
          type: "boolean"
        clients:
          type: "array"
          items:
            $ref: "#/components/schemas/ClientEntity"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    ClientEntity:
      type: "object"
      properties:
        name:
          type: "string"
        inn:
          type: "string"
        discount:
          type: "integer"
          format: "int32"
        contractNumber:
          type: "integer"
          format: "int32"
        contractDate:
          type: "string"
          format: "date-time"
        balance:
          type: "integer"
          format: "int32"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/UserEntity"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    FmEntity:
      type: "object"
      properties:
        client:
          $ref: "#/components/schemas/ClientEntity"
        name:
          type: "string"
        ip:
          type: "string"
        specifications:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        vm:
          type: "boolean"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    ClientInsertForm:
      type: "object"
      properties:
        name:
          type: "string"
        inn:
          type: "string"
        discount:
          type: "integer"
          format: "int32"
        contractNumber:
          type: "integer"
          format: "int32"
        contractDate:
          type: "string"
          format: "date-time"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "name"
        - "inn"
        - "contractDate"
        - "title"
        - "description"
        - "token"
    ClientUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        inn:
          type: "string"
        discount:
          type: "integer"
          format: "int32"
        contractNumber:
          type: "integer"
          format: "int32"
        contractDate:
          type: "string"
          format: "date-time"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "name"
        - "inn"
        - "contractDate"
        - "title"
        - "description"
        - "token"
    ClientBalanceForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        balance:
          type: "integer"
          format: "int32"
        token:
          type: "string"
      required:
        - "token"
    ClientPayForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        sum:
          type: "integer"
          format: "int32"
        token:
          type: "string"
      required:
        - "token"
    NetInsertForm:
      type: "object"
      properties:
        domain:
          type: "string"
        subnet:
          type: "string"
        mask:
          type: "string"
        dns1:
          type: "string"
        dns2:
          type: "string"
        dns3:
          type: "string"
        cloud:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "domain"
        - "subnet"
        - "mask"
        - "dns1"
        - "dns2"
        - "dns3"
        - "title"
        - "description"
        - "token"
    NetUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        domain:
          type: "string"
        subnet:
          type: "string"
        mask:
          type: "string"
        dns1:
          type: "string"
        dns2:
          type: "string"
        dns3:
          type: "string"
        cloud:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "domain"
        - "subnet"
        - "mask"
        - "dns1"
        - "dns2"
        - "dns3"
        - "title"
        - "description"
        - "token"
    NetEntity:
      type: "object"
      properties:
        client:
          $ref: "#/components/schemas/ClientEntity"
        domain:
          type: "string"
        subnet:
          type: "string"
        mask:
          type: "string"
        dns1:
          type: "string"
        dns2:
          type: "string"
        dns3:
          type: "string"
        cloud:
          type: "boolean"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
      required:
        - "subnet"
        - "mask"
        - "dns1"
    RegInsertForm:
      type: "object"
      properties:
        brand:
          type: "string"
        name:
          type: "string"
        part:
          type: "string"
        serial:
          type: "string"
        buyDate:
          type: "string"
          format: "date-time"
        warrantyMonths:
          type: "integer"
          format: "int32"
        provider:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "brand"
        - "name"
        - "part"
        - "serial"
        - "buyDate"
        - "provider"
        - "title"
        - "description"
        - "token"
    RegUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        brand:
          type: "string"
        name:
          type: "string"
        part:
          type: "string"
        serial:
          type: "string"
        buyDate:
          type: "string"
          format: "date-time"
        warrantyMonths:
          type: "integer"
          format: "int32"
        provider:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "brand"
        - "name"
        - "part"
        - "serial"
        - "buyDate"
        - "provider"
        - "title"
        - "description"
        - "token"
    RegEntity:
      type: "object"
      properties:
        brand:
          type: "string"
        name:
          type: "string"
        part:
          type: "string"
        serial:
          type: "string"
        buyDate:
          type: "string"
          format: "date-time"
        warrantyMonths:
          type: "integer"
          format: "int32"
        provider:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
      required:
        - "name"
    VmInsertUpdateForm:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        cpu:
          type: "integer"
          format: "int32"
        ram:
          type: "integer"
          format: "int32"
        ssd:
          type: "integer"
          format: "int32"
        hdd:
          type: "integer"
          format: "int32"
        running:
          type: "boolean"
        fmEntity:
          $ref: "#/components/schemas/FmEntity"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "id"
        - "name"
        - "fmEntity"
        - "title"
        - "description"
        - "token"
    VmDeleteForm:
      type: "object"
      properties:
        id:
          type: "string"
        token:
          type: "string"
      required:
        - "id"
        - "token"
    VmRentForm:
      type: "object"
      properties:
        entityId:
          type: "string"
        clientId:
          type: "integer"
          format: "int64"
        token:
          type: "string"
      required:
        - "entityId"
        - "token"
    VmHistory:
      type: "object"
      properties:
        name:
          type: "string"
        cpu:
          type: "integer"
          format: "int32"
        ram:
          type: "integer"
          format: "int32"
        ssd:
          type: "integer"
          format: "int32"
        hdd:
          type: "integer"
          format: "int32"
        running:
          type: "boolean"
        fmEntity:
          $ref: "#/components/schemas/FmEntity"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        changeBy:
          $ref: "#/components/schemas/UserEntity"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    HttpHeaders:
      type: "object"
      properties: { }
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
      required:
        - "headers"
    VmEntity:
      type: "object"
      properties:
        id:
          type: "string"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
        clientEntity:
          $ref: "#/components/schemas/ClientEntity"
        name:
          type: "string"
        cpu:
          type: "integer"
          format: "int32"
        ram:
          type: "integer"
          format: "int32"
        ssd:
          type: "integer"
          format: "int32"
        hdd:
          type: "integer"
          format: "int32"
        running:
          type: "boolean"
        fmEntity:
          $ref: "#/components/schemas/FmEntity"
    VpnTypeInsertForm:
      type: "object"
      properties:
        name:
          type: "string"
        token:
          type: "string"
      required:
        - "name"
        - "token"
    VpnTypeUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        token:
          type: "string"
      required:
        - "name"
        - "token"
    CertPath:
      type: "object"
      properties: { }
    VpnServerEntity:
      type: "object"
      properties:
        ip:
          type: "string"
        publicKey:
          type: "string"
        netEntity:
          $ref: "#/components/schemas/NetEntity"
        vpnTypeEntity:
          type: "array"
          items:
            $ref: "#/components/schemas/VpnTypeEntity"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    VpnServerHistory:
      type: "object"
      properties:
        ip:
          type: "string"
        publicKey:
          type: "string"
        netEntity:
          $ref: "#/components/schemas/NetEntity"
        vpnTypeEntity:
          type: "array"
          items:
            $ref: "#/components/schemas/VpnTypeEntity"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        changeBy:
          $ref: "#/components/schemas/UserEntity"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    VpnTypeEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        vpnServerEntity:
          type: "array"
          items:
            $ref: "#/components/schemas/VpnServerEntity"
        vpnServerHistory:
          type: "array"
          items:
            $ref: "#/components/schemas/VpnServerHistory"
    VpnServerInsertForm:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
        ip:
          type: "string"
        publicKey:
          type: "string"
        netEntity:
          $ref: "#/components/schemas/NetEntity"
        vpnTypeEntity:
          type: "array"
          items:
            $ref: "#/components/schemas/VpnTypeEntity"
        token:
          type: "string"
      required:
        - "title"
        - "description"
        - "ip"
        - "publicKey"
        - "netEntity"
        - "vpnTypeEntity"
        - "token"
    VpnServerUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        description:
          type: "string"
        ip:
          type: "string"
        publicKey:
          type: "string"
        netEntity:
          $ref: "#/components/schemas/NetEntity"
        vpnTypeEntity:
          type: "array"
          items:
            $ref: "#/components/schemas/VpnTypeEntity"
        token:
          type: "string"
      required:
        - "title"
        - "description"
        - "ip"
        - "publicKey"
        - "netEntity"
        - "vpnTypeEntity"
        - "token"
    VpnUserInsertForm:
      type: "object"
      properties:
        vpnServerEntity:
          $ref: "#/components/schemas/VpnServerEntity"
        vpnTypeEntity:
          $ref: "#/components/schemas/VpnTypeEntity"
        ip:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "vpnServerEntity"
        - "vpnTypeEntity"
        - "ip"
        - "username"
        - "password"
        - "fullName"
        - "title"
        - "description"
        - "token"
    VpnUserUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        vpnServerEntity:
          $ref: "#/components/schemas/VpnServerEntity"
        vpnTypeEntity:
          $ref: "#/components/schemas/VpnTypeEntity"
        ip:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "vpnServerEntity"
        - "vpnTypeEntity"
        - "ip"
        - "username"
        - "password"
        - "fullName"
        - "title"
        - "description"
        - "token"
    VpnUserEntity:
      type: "object"
      properties:
        vpnServerEntity:
          $ref: "#/components/schemas/VpnServerEntity"
        vpnTypeEntity:
          $ref: "#/components/schemas/VpnTypeEntity"
        ip:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          type: "boolean"
        title:
          type: "string"
        description:
          type: "string"
    UserInsertForm:
      type: "object"
      properties:
        username:
          type: "string"
        rawPassword:
          type: "string"
        fullName:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "username"
        - "rawPassword"
        - "fullName"
        - "title"
        - "description"
        - "token"
    UserUpdateForm:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        rawPassword:
          type: "string"
        fullName:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        token:
          type: "string"
      required:
        - "username"
        - "rawPassword"
        - "fullName"
        - "title"
        - "description"
        - "token"